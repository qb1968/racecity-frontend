{"ast":null,"code":"import * as React from \"react\";\nimport { disablePageScroll, enablePageScroll } from \"scroll-lock\";\n\nfunction useScrollLock(enabled, ref) {\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  var disabledRef = React.useRef(false); // scroll-lock uses an internal queue. we need to ensure that we only enable\n  // scrolling here if we have already disabled scrolling.\n\n  React.useEffect(function () {\n    if (enabled && !disabledRef.current) {\n      disablePageScroll(ref ? ref.current : undefined);\n      disabledRef.current = true;\n    }\n\n    return function () {\n      if (disabledRef.current) {\n        enablePageScroll(ref ? ref.current : undefined);\n        disabledRef.current = false;\n      }\n    };\n  }, [enabled, ref, disabledRef]);\n}\n\nexport default useScrollLock;","map":{"version":3,"sources":["D:/Dustin/racecity-frontend/node_modules/use-scroll-lock/esm/index.js"],"names":["React","disablePageScroll","enablePageScroll","useScrollLock","enabled","ref","disabledRef","useRef","useEffect","current","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,aAApD;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,GAAhC,EAAqC;AACjC,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,IAAV;AAAiB;;AAC3C,MAAIE,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAa,KAAb,CAAlB,CAFiC,CAGjC;AACA;;AACAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAY;AACxB,QAAIJ,OAAO,IAAI,CAACE,WAAW,CAACG,OAA5B,EAAqC;AACjCR,MAAAA,iBAAiB,CAACI,GAAG,GAAGA,GAAG,CAACI,OAAP,GAAiBC,SAArB,CAAjB;AACAJ,MAAAA,WAAW,CAACG,OAAZ,GAAsB,IAAtB;AACH;;AACD,WAAO,YAAY;AACf,UAAIH,WAAW,CAACG,OAAhB,EAAyB;AACrBP,QAAAA,gBAAgB,CAACG,GAAG,GAAGA,GAAG,CAACI,OAAP,GAAiBC,SAArB,CAAhB;AACAJ,QAAAA,WAAW,CAACG,OAAZ,GAAsB,KAAtB;AACH;AACJ,KALD;AAMH,GAXD,EAWG,CAACL,OAAD,EAAUC,GAAV,EAAeC,WAAf,CAXH;AAYH;;AACD,eAAeH,aAAf","sourcesContent":["import * as React from \"react\";\nimport { disablePageScroll, enablePageScroll } from \"scroll-lock\";\nfunction useScrollLock(enabled, ref) {\n    if (enabled === void 0) { enabled = true; }\n    var disabledRef = React.useRef(false);\n    // scroll-lock uses an internal queue. we need to ensure that we only enable\n    // scrolling here if we have already disabled scrolling.\n    React.useEffect(function () {\n        if (enabled && !disabledRef.current) {\n            disablePageScroll(ref ? ref.current : undefined);\n            disabledRef.current = true;\n        }\n        return function () {\n            if (disabledRef.current) {\n                enablePageScroll(ref ? ref.current : undefined);\n                disabledRef.current = false;\n            }\n        };\n    }, [enabled, ref, disabledRef]);\n}\nexport default useScrollLock;\n"]},"metadata":{},"sourceType":"module"}