{"ast":null,"code":"export const addItem = (item = [], count = 0, next = f => f) => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.push({ ...item,\n      count: 1\n    }); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n};\nexport const itemTotal = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart')).length;\n    }\n  }\n\n  return 0;\n};\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\nexport const removeItem = productId => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n\n  return cart;\n};\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};","map":{"version":3,"sources":["D:/Dustin/racecity-frontend/src/core/cartHelpers.js"],"names":["addItem","item","count","next","f","cart","window","localStorage","getItem","JSON","parse","push","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,CAACC,IAAI,GAAG,EAAR,EAAYC,KAAK,GAAG,CAApB,EAAuBC,IAAI,GAAIC,CAAD,IAAOA,CAArC,KAA2C;AAChE,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChCH,MAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD;;AACDH,IAAAA,IAAI,CAACM,IAAL,CAAU,EACR,GAAGV,IADK;AAERC,MAAAA,KAAK,EAAE;AAFC,KAAV,EAJiC,CASjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,IAAAA,IAAI,GAAGO,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQT,IAAI,CAACU,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACC,GAAlB,CAAR,CAAX,EAA4CF,GAA5C,CAAiDG,EAAD,IAAQ;AAC7D,aAAOb,IAAI,CAACc,IAAL,CAAWH,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUC,EAA3B,CAAP;AACD,KAFM,CAAP;AAIAX,IAAAA,YAAY,CAACa,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACY,SAAL,CAAehB,IAAf,CAA7B;AACAF,IAAAA,IAAI;AACL;AACF,CA3BM;AA6BP,OAAO,MAAMmB,SAAS,GAAG,MAAM;AAC7B,MAAI,OAAOhB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChC,aAAOC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCe,MAAhD;AACD;AACF;;AACD,SAAO,CAAP;AACD,CAPM;AASP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,MAAI,OAAOlB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChC,aAAOC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD;AACF;;AACD,SAAO,EAAP;AACD,CAPM;AASP,OAAO,MAAMiB,UAAU,GAAG,CAACC,SAAD,EAAYxB,KAAZ,KAAsB;AAC9C,MAAIG,IAAI,GAAG,EAAX;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChCH,MAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD;;AAEDH,IAAAA,IAAI,CAACU,GAAL,CAAS,CAACY,OAAD,EAAUC,CAAV,KAAgB;AACvB,UAAID,OAAO,CAACV,GAAR,KAAgBS,SAApB,EAA+B;AAC7BrB,QAAAA,IAAI,CAACuB,CAAD,CAAJ,CAAQ1B,KAAR,GAAgBA,KAAhB;AACD;AACF,KAJD;AAMAK,IAAAA,YAAY,CAACa,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACY,SAAL,CAAehB,IAAf,CAA7B;AACD;AACF,CAfM;AAiBP,OAAO,MAAMwB,UAAU,GAAIH,SAAD,IAAe;AACvC,MAAIrB,IAAI,GAAG,EAAX;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChCH,MAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD;;AAEDH,IAAAA,IAAI,CAACU,GAAL,CAAS,CAACY,OAAD,EAAUC,CAAV,KAAgB;AACvB,UAAID,OAAO,CAACV,GAAR,KAAgBS,SAApB,EAA+B;AAC7BrB,QAAAA,IAAI,CAACyB,MAAL,CAAYF,CAAZ,EAAe,CAAf;AACD;AACF,KAJD;AAMArB,IAAAA,YAAY,CAACa,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACY,SAAL,CAAehB,IAAf,CAA7B;AACD;;AACD,SAAOA,IAAP;AACD,CAhBM;AAkBP,OAAO,MAAM0B,SAAS,GAAI5B,IAAD,IAAU;AACjC,MAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmC;AACjCC,IAAAA,YAAY,CAACsB,UAAb,CAAwB,MAAxB;AACA1B,IAAAA,IAAI;AACL;AACF,CALM","sourcesContent":["export const addItem = (item = [], count = 0, next = (f) => f) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n    cart.push({\r\n      ...item,\r\n      count: 1,\r\n    });\r\n\r\n    // remove duplicates\r\n    // build an Array from new Set and turn it back into array using Array.from\r\n    // so that later we can re-map it\r\n    // new set will only allow unique values in it\r\n    // so pass the ids of each object/product\r\n    // If the loop tries to add the same value again, it'll get ignored\r\n    // ...with the array of ids we got on when first map() was used\r\n    // run map() on it again and return the actual product from the cart\r\n\r\n    cart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\r\n      return cart.find((p) => p._id === id);\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    next();\r\n  }\r\n};\r\n\r\nexport const itemTotal = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart')).length;\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const getCart = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const updateItem = (productId, count) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart[i].count = count;\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n};\r\n\r\nexport const removeItem = (productId) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n  return cart;\r\n};\r\n\r\nexport const emptyCart = (next) => {\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.removeItem('cart');\r\n    next();\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}