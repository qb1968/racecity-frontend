{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dustin\\\\racecity-frontend\\\\src\\\\core\\\\sample.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Layout from \"./Layout\";\nimport Search from \"./Search\";\nimport { getCategories, getFilteredProducts } from \"./apiCore\";\n\nconst Sample = () => {\n  const [myFilters, setMyFilters] = useState({\n    filters: {\n      category: []\n    }\n  });\n  const [categories, setCategories] = useState([]);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [error, setError] = useState(false);\n  const [limit, setLimit] = useState(5000);\n  const [skip, setSkip] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const init = () => {\n    getCategories().then(data => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setCategories(data);\n      }\n\n      console.log(data);\n    });\n  };\n\n  const loadFilteredResults = newFilters => {\n    console.log(newFilters);\n    getFilteredProducts(skip, limit, newFilters).then(data => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setFilteredResults(data.data);\n        setSize(data.size);\n        setSkip(0);\n      }\n\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {\n    init();\n    loadFilteredResults(skip, limit, myFilters.filters);\n  }, []);\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Sample;","map":{"version":3,"sources":["D:/Dustin/racecity-frontend/src/core/sample.js"],"names":["React","useState","useEffect","Layout","Search","getCategories","getFilteredProducts","Sample","myFilters","setMyFilters","filters","category","categories","setCategories","filteredResults","setFilteredResults","error","setError","limit","setLimit","skip","setSkip","size","setSize","init","then","data","console","log","loadFilteredResults","newFilters"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,WAAnD;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC;AACzCS,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AADgC,GAAD,CAA1C;AAIE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACE,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,CAAD,CAAhC;;AAEF,QAAMuB,IAAI,GAAG,MAAM;AACjBnB,IAAAA,aAAa,GAAGoB,IAAhB,CAAsBC,IAAD,IAAU;AAC7B,UAAIA,IAAI,CAACV,KAAT,EAAgB;AACdC,QAAAA,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;AACD,OAFD,MAEO;AACLH,QAAAA,aAAa,CAACa,IAAD,CAAb;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAPD;AAQC,GATH;;AAWG,QAAMG,mBAAmB,GAAIC,UAAD,IAAgB;AAC1CH,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACAxB,IAAAA,mBAAmB,CAACc,IAAD,EAAOF,KAAP,EAAcY,UAAd,CAAnB,CAA6CL,IAA7C,CAAmDC,IAAD,IAAU;AAC1D,UAAIA,IAAI,CAACV,KAAT,EAAgB;AACdC,QAAAA,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;AACD,OAFD,MAEO;AACLD,QAAAA,kBAAkB,CAACW,IAAI,CAACA,IAAN,CAAlB;AACAH,QAAAA,OAAO,CAACG,IAAI,CAACJ,IAAN,CAAP;AACAD,QAAAA,OAAO,CAAC,CAAD,CAAP;AACD;;AACDM,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KATD;AAUF,GAZA;;AAcAxB,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,IAAI;AACJK,IAAAA,mBAAmB,CAACT,IAAD,EAAOF,KAAP,EAAcV,SAAS,CAACE,OAAxB,CAAnB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKD,sBACK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CADL;AAKH,CA/CD;;AAiDA,eAAeH,MAAf","sourcesContent":["import React from 'react';\r\nimport { useState,useEffect } from 'react';\r\nimport Layout from \"./Layout\";\r\nimport Search from \"./Search\";\r\nimport { getCategories, getFilteredProducts } from \"./apiCore\";\r\n\r\nconst Sample = () => {\r\nconst [myFilters, setMyFilters] = useState({\r\n  filters: { category: [] },\r\n});\r\n    \r\n  const [categories, setCategories] = useState([]);\r\n    const [filteredResults, setFilteredResults] = useState([]);\r\n    const [error, setError] = useState(false);\r\n    const [limit, setLimit] = useState(5000);\r\n    const [skip, setSkip] = useState(0);\r\n    const [size, setSize] = useState(0);\r\n\r\n  const init = () => {\r\n    getCategories().then((data) => {\r\n      if (data.error) {\r\n        setError(data.error);\r\n      } else {\r\n        setCategories(data);\r\n      }\r\n      console.log(data);\r\n    });\r\n    };\r\n\r\n     const loadFilteredResults = (newFilters) => {\r\n       console.log(newFilters);\r\n       getFilteredProducts(skip, limit, newFilters).then((data) => {\r\n         if (data.error) {\r\n           setError(data.error);\r\n         } else {\r\n           setFilteredResults(data.data);\r\n           setSize(data.size);\r\n           setSkip(0);\r\n         }\r\n         console.log(data);\r\n       });\r\n    };\r\n    \r\n     useEffect(() => {\r\n       init();\r\n       loadFilteredResults(skip, limit, myFilters.filters);\r\n     }, []);\r\n    \r\n    return (\r\n         <Layout>\r\n        <Search/>\r\n       </Layout>\r\n    )\r\n}\r\n\r\nexport default Sample;\r\n"]},"metadata":{},"sourceType":"module"}