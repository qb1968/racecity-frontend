{"ast":null,"code":"import _objectSpread from\"D:\\\\Dustin\\\\racecity-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";export var addItem=function addItem(){var item=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var next=arguments.length>2&&arguments[2]!==undefined?arguments[2]:function(f){return f;};var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.push(_objectSpread(_objectSpread({},item),{},{count:1}));// remove duplicates\n// build an Array from new Set and turn it back into array using Array.from\n// so that later we can re-map it\n// new set will only allow unique values in it\n// so pass the ids of each object/product\n// If the loop tries to add the same value again, it'll get ignored\n// ...with the array of ids we got on when first map() was used\n// run map() on it again and return the actual product from the cart\ncart=Array.from(new Set(cart.map(function(p){return p._id;}))).map(function(id){return cart.find(function(p){return p._id===id;});});localStorage.setItem('cart',JSON.stringify(cart));next();}};export var itemTotal=function itemTotal(){if(typeof window!=='undefined'){if(localStorage.getItem('cart')){return JSON.parse(localStorage.getItem('cart')).length;}}return 0;};export var getCart=function getCart(){if(typeof window!=='undefined'){if(localStorage.getItem('cart')){return JSON.parse(localStorage.getItem('cart'));}}return[];};export var updateItem=function updateItem(productId,count){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.map(function(product,i){if(product._id===productId){cart[i].count=count;}});localStorage.setItem('cart',JSON.stringify(cart));}};export var removeItem=function removeItem(productId){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.map(function(product,i){if(product._id===productId){cart.splice(i,1);}});localStorage.setItem('cart',JSON.stringify(cart));}return cart;};export var emptyCart=function emptyCart(next){if(typeof window!=='undefined'){localStorage.removeItem('cart');next();}};","map":{"version":3,"sources":["D:/Dustin/racecity-frontend/src/core/cartHelpers.js"],"names":["addItem","item","count","next","f","cart","window","localStorage","getItem","JSON","parse","push","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"mappings":"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","sourcesContent":["export const addItem = (item = [], count = 0, next = (f) => f) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n    cart.push({\r\n      ...item,\r\n      count: 1,\r\n    });\r\n\r\n    // remove duplicates\r\n    // build an Array from new Set and turn it back into array using Array.from\r\n    // so that later we can re-map it\r\n    // new set will only allow unique values in it\r\n    // so pass the ids of each object/product\r\n    // If the loop tries to add the same value again, it'll get ignored\r\n    // ...with the array of ids we got on when first map() was used\r\n    // run map() on it again and return the actual product from the cart\r\n\r\n    cart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\r\n      return cart.find((p) => p._id === id);\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    next();\r\n  }\r\n};\r\n\r\nexport const itemTotal = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart')).length;\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const getCart = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const updateItem = (productId, count) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart[i].count = count;\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n};\r\n\r\nexport const removeItem = (productId) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n  return cart;\r\n};\r\n\r\nexport const emptyCart = (next) => {\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.removeItem('cart');\r\n    next();\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}